
AWS- {
Bhaskar india+ startup india-  (Start, inv )
SRF ()
}

Local- ECMS (BEL -bangule)  ()

____________________________________________________
FE:-
AEM + reactJs + drupal 
{dev
uat
prod}


spring (End user interface) + spring boot (Admin poratl) + microservice (search + crawl )(4 services- crawl + aggregare + )

Databse
{                       Mongo                            }	{ ELKS }


Cloud
AWS +jenkins (pipeline) + githlab (code versioning)  





Flow



---->gitlab - {dev Jenkins} + sonarlint ---> (manager)  (uat ) ()EC2 ----> 


Hibernate _jersey


----------------------------------------------------------------------------------------------------------------------------------------------------------------

@hash
class Employee{

	int id;

	String name;

	int salary;

	Date dob;


@equals
public static 

@hash

}
 
 
__________________________ 
 
List<Employee> employeeList

__________________________

X Map<Integer, Employee> employeeMap= employeeList.stream().collect(employeeList::getId, employeeList).Collect(Colectors.toMap());
Map<Integer, Employee> employeeMap= employeeList.stream().collect(Collectors.toMap(employee::getId, employee-> employeeList));

__________________________

X List<String> employeeMap= employeeList.stream().forEach(e->e.getName()).collect(Collectors.toList();
List<String> employeeMap= employeeList.stream().map(e::getName()).collect(Collectors.toList());

__________________________
employee
id|name|salary|manager_id
1|Saurabh|10000|
2|Somesh|5000|1
3|Shyam|5000|2
  
manger
 
name|manager_name
Shyam|Somesh
Somesh|Saurabh
Saurabh|NULL

X select e.name, ee.name as manager_name from employee e where e.manager_id = (select ee.id from employee ee)

SELECT e.name, ee.name AS manager_name
FROM employee e
LEFT JOIN employee ee ON e.manager_id = ee.id;
__________________________


---------------------------------------------------------------------------------------------------------------------------------------------------------------




class Singleton implement Serilization{



private Singleton{
}

//lazt instl.
private static class gethelper{

private static final Singleton singleInst =new Singleton();

} 


public static syncronized Singleton getInstance(){

return gethelper.singleInst;

}


}
__________________________
import java.io.Serializable;

public class Singleton implements Serializable, Cloneable {
    
    // Step 1: Declare a private static instance (the Singleton instance)
    private static volatile Singleton instance;

    // Step 2: Private constructor to prevent instantiation
    private Singleton() {
        if (instance != null) {
            throw new IllegalStateException("Instance already created");
        }
    }

    // Step 3: Provide a global point of access with lazy initialization and thread-safety
    public static Singleton getInstance() {
        if (instance == null) {  // First check
            synchronized (Singleton.class) {  // Synchronize to ensure thread-safety
                if (instance == null) {  // Second check (double-checked locking)
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }

    // Step 4: Handle serialization properly with readResolve() method
    private Object readResolve() {
        return getInstance(); // Ensure that the deserialized object is the same instance
    }

    // Step 5: Prevent cloning by overriding the clone() method
    @Override
    public Object clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException("Clone not supported for Singleton class");
    }
}





